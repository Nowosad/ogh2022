---
title: "Geocomputation with R's guide <br>to reproducible <br>spatial data analysis"
author: "Jakub Nowosad, https://jakubnowosad.com/"
institute: "OpenGeoHub Summer School 2022"
date: "2022-08-30"
date-format: iso
format:
  n3-revealjs:
    echo: true
    highlight-style: github
    slide-number: c/t
    width: 1600
    height: 900
    footer: "[jakubnowosad.com/ogh2022](https://jakubnowosad.com/ogh2022/)"
    transition: none
---

# Chapter 1: Geocomputation

<!-- 1.5h + 1.5h -->
<!-- 100 slides top! -->

---

<!-- openshaw -->
<!-- currently an obvious thing -->
<!-- what it involves -->
<!-- connection between different fields -->

::: {.r-fit-text}
(geo)spati|graphic)\*(al)\*

( )\*(stuff|data|comput|inform)\*(ing|ation)\*

(science|systems|theory|analysis)\*
:::


Based on the David O’Sullivan's talk title at the Geocomputation 2019 conference

---

::: {.r-fit-text}
(**geo**)spati|graphic)\*(al)\*

( )\*(stuff|data|**comput**|inform)\*(ing|**ation**)\*

(science|systems|theory|analysis)\*
:::

Based on the David O’Sullivan's talk title at the Geocomputation 2019 conference

---

:::: {.columns}

::: {.column width="40%"}

> GeoComputation is about using the various different types of geodata and about developing relevant geo-tools within the overall context of a 'scientific' approach (Openshaw 2000).

:::

::: {.column width="60%"}

![](figs/s.openshaw.png){.r-stretch}

:::

::::

<!-- - But we do differ from early definitions in one important way: -->

::: aside
> At the turn of the 21st Century it was unrealistic to expect readers to be able to reproduce code examples, due to barriers preventing access to the necessary hardware, software and data
:::

---

```{r gdsl, echo=FALSE, message=FALSE}
d = readr::read_csv("data/gis-vs-gds-table.csv")
knitr::kable(x = d, 
             caption = paste("Differences in emphasis between software", 
                             "packages (Graphical User Interface (GUI) of", 
                             "Geographic Information Systems (GIS) and R)."),
             caption.short = "Differences between GUI and CLI",
             booktabs = TRUE)
```

<!-- This book is motivated by the importance of reproducibility\index{reproducibility} for scientific research (see the note below). -->
<!-- It aims to make reproducible geographic data analysis\index{geographic data analysis} workflows more accessible, and demonstrate the power of open geospatial software available from the command-line. -->

# GIS Applications

:::: {.columns}

::: {.column width="50%"}
```{r, echo=FALSE, warning=FALSE, fig.height=7}
# install.packages("wordcloud")
library(wordcloud)
w = c("Ecology", "Earth-Observation", "Economics", "Demography",
  "Politics", "Journalism", "History", "Archeology", "Transport", 
  "Climatology", "Meteorology")
w2 = c("Geomorphometry", "Astronomy", "Architecture", "Hydrology",
       "Insurance", "Urban-Planning", "Mining", "Marine-Studies",
       "Soil-Science", "Sport", "Telecomunication", "Tourism")
wordcloud(c(w), rot.per = 0.2)
```
:::

:::  {.column width="40%"}
```{r}
#| echo = FALSE,
#| fig.height=7
wordcloud(c(w2), rot.per = 0.2)
```
:::

::::

## Data models

<!-- Traditionally, spatial data is described by two basic data models: vector data model aimed at representing the world using points, lines, and polygons, and raster data model focused on representing surfaces -->

---

![Source: https://r-tmap.github.io/](figs/vector-data-model-1.png)

---

![Source: https://r-tmap.github.io/](figs/raster-intro-1.png)

---

![Source: https://r-tmap.github.io/](figs/vector-data-cubes-1.png){.r-stretch}
![Source: https://r-tmap.github.io/](figs/raster-data-cubes-1.png){.r-stretch}

---

![Source: https://github.com/Jean-Romain/lidR](figs/point-cloud-rotating.gif)

## Coordinate reference systems


```{r, purl=FALSE,echo=FALSE, warning=FALSE}
library(tmap)
library(sf)
world_gr = st_graticule(ndiscr = 9999,
                                  lon = seq(-90, 90, 10),
                                  lat = seq(-180, 180, 10))

ortho_crs = st_crs("+proj=ortho")
world_gr2 = st_transform(world_gr, crs = ortho_crs)
tm1 = tm_shape(world_gr2) +
  tm_lines() +
  tm_layout(inner.margins = 0.05, 
            frame = FALSE, 
            outer.margins = 0)

grid_sf = st_make_grid(world_gr2)
tm2 = tm_shape(grid_sf) +
  tm_polygons(alpha = 0) +
  tm_layout(inner.margins = 0.05, 
            frame = FALSE, 
            outer.margins = 0)
```


:::: {.columns}

::: {.column}
**Geographic coordinates**
```{r, purl=FALSE,echo=FALSE, warning=FALSE, fig.height=6, fig.width=6}
tm1
```
:::

::: {.column}
**Projected coordinates**
```{r, purl=FALSE,echo=FALSE, warning=FALSE, fig.height=6, fig.width=6}
tm2
```
:::

::::

<!-- https://mdsumner.github.io/2016/01/26/Three_Projections.html -->

## Data sources

<!-- Źródła danych, pliki, servery, stac, gee, closed and open,  -->
<!-- zarr, cog, parquet, geoarrow -->
<!-- https://t.co/ra3O5HiwjR -->

## Data processing

## Basic vector operations

- Simplification
- Intersect
- Additional topological relations
- Spatial joins
- Centroids
- Buffers

## Map algebra

Used for a various task related to spatial raster data.

It can be divided into four groups:

1. **Local** - per-cell operations
2. **Focal (neighborhood operations)** - most often the output cell value is the result of a 3 x 3 input cell block
3. **Zonal operations** - to summarize raster values for some zones (usually irregular areas)
4. **Global** - to summarize raster values for one or several rasters

## Raster-vector interactions

1. Raster cropping and masking
2. Raster extraction - by points, lines, and polygons
3. Rasterization - points, lines, polygons to rasters
4. Vectorization - rasters to polygons or contours

<!-- reprojections? -->

## Spatial data analysis

```{dot}
#| echo = FALSE
digraph G {
     layout=circo
     rankdir=LR
     
     node [shape=circle];
     cir1 [label="Spatial analysis"];
     
     node [shape=rectangle];
     rec1 [label="Spatial autocorrelation"];
     rec2 [label="Spatial interpolation"];
     rec3 [label="Spatial interaction"];
     rec4 [label="Simulation and modeling"];
     rec5 [label="Density mapping"];
     
     rec1 -> cir1;
     rec2 -> cir1;
     rec3 -> cir1;
     rec4 -> cir1;
     rec5 -> cir1;
     }
```

*(incomplete list)*

## Spatial data analysis


```{dot d2}
#| echo = FALSE
digraph G2 {
   layout=circo
   rankdir=LR
   
   node [shape = circle];
   cir1 [label = "Spatial analysis"];
   
   node [shape = rectangle];
   rec1 [label = "Spatial modeling"];
   rec2 [label = "Point pattern analysis"];
   rec3 [label = "Network analysis"];
   rec4 [label = "Surface analysis"];
   rec5 [label = "Grid analysis"];
   rec6 [label = "Single-layer operations"];
   rec7 [label = "Multi-layer operations"];
   
   rec1 -> cir1;
   rec2 -> cir1;
   rec3 -> cir1;
   rec4 -> cir1;
   rec5 -> cir1;
   rec6 -> cir1;
   rec7 -> cir1;
   }
```
*(incomplete list)*

## Geocomputational methods

- Exploratory data analysis (EDA)
- Data processing (e.g., adding new variables)
- Data transformation (e.g., changing CRS, reducing size via simplification/aggregation)
- Data visualization
- Web application development
- Software development (e.g., to share new methods)

## Spatial vizualizations

# Chapter 2: Geocomputation with R

## Ecosystems

<!-- more than one way to solve a problem -->

---

- [{sf}](https://github.com/r-spatial/sf),
[{sp}](https://github.com/edzer/sp),
[{terra}](https://github.com/rspatial/terra),
[{raster}](https://github.com/rspatial/raster), [{stars}](https://github.com/r-spatial/stars) - spatial classes
- [{dplyr}](https://github.com/tidyverse/dplyr), [{rmapshaper}](https://github.com/ateucher/rmapshaper) - processing of attribute tables/geometries 
- [{rnaturalearth}](https://github.com/ropensci/rnaturalearth), [{osmdata}](https://github.com/ropensci/osmdata) - spatial data download
- [{rgrass}](https://github.com/rsbivand/rgrass), [{qgisprocess}](https://github.com/paleolimbot/qgisprocess), [{link2GI}](https://github.com/r-spatial/link2GI) - connecting with GIS software
- [{gstat}](https://github.com/r-spatial/gstat), [{mlr3}](https://github.com/mlr-org/mlr3), [{CAST}](https://github.com/HannaMeyer/CAST) - spatial data modeling
- [{rasterVis}](https://github.com/oscarperpinan/rastervis), [{tmap}](https://github.com/mtennekes/tmap), [{ggplot2}](https://github.com/tidyverse/ggplot2) - static visualizations
- [{leaflet}](https://github.com/rstudio/leaflet), [{mapview}](https://github.com/r-spatial/mapview), [{mapdeck}](https://github.com/SymbolixAU/mapdeck) - interactive visualizations
- [{spatstat}](http://spatstat.org/), [{spdep}](https://github.com/r-spatial/spdep), [{spatialreg}](https://github.com/r-spatial/spatialreg), [{dismo}](https://github.com/rspatial/dismo), [{landscapemetrics}](https://github.com/r-spatialecology/landscapemetrics), [{RStoolbox}](http://bleutner.github.io/RStoolbox/rstbx-docu/RStoolbox.html), [{rayshader}](https://github.com/tylermorganwall/rayshader), [{gdalcubes}](https://github.com/appelmar/gdalcubes_R), [{sfnetworks}](https://github.com/luukvdmeer/sfnetworks) - different types of spatial data analysis
- many more...

Visit https://cran.r-project.org/view=Spatial to get an overview of different spatial tasks that can be solved using R.

---

![Source: https://geocompr.robinlovelace.net](https://geocompr.robinlovelace.net/figures/01-cranlogs.png)

---

```{r}
library(spData)
library(sf)
world
```

---

```{r}
plot(world)
```

---

![Source: https://www.r-spatial.org/r/2020/03/17/wkt.html](https://keen-swartz-3146c4.netlify.com/images/sf_deps.png)

<!-- + mention bridges -->



---

```{r}
library(terra)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
srtm
```

---

```{r}
plot(srtm)
```

---

![](figs/terra-libs.png)

---

- [rspatial](https://www.rspatial.org/) vs [r-spatial](https://www.r-spatial.org/)
- Old vs New
- [Legacy](https://geocompr.robinlovelace.net/intro.html#the-history-of-r-spatial)
- Other R ecosystems


---

![{stars} - https://r-spatial.github.io/stars/](figs/cube2.png)


---

![{s2} - https://r-spatial.github.io/s2/](figs/s2.png)

<!-- also geoarrow -->

---

![{lidR} - https://github.com/r-lidar/lidR](figs/lidr.png)

---

![{sfnetwork} - https://luukvdmeer.github.io/sfnetworks](figs/sfnetwork.png)

---

![{spatstat} - https://spatstat.org/](figs/spatstat.png)

<!-- ecosystem of packages on its own! -->

---

![hypertidy-verse - https://github.com/hypertidy](figs/hypertidy.png)


## {supercells}

```{r}
#| message: false
library(supercells)
library(terra)
s = rast(system.file("ex/logo.tif", package = "terra"))   
sc = supercells(s, 500, compactness = 50, transform = "to_LAB")
```

:::: {.columns}
::: {.column}

```{r}
#| echo: false
#| fig-height: 8
plotRGB(s); plot(vect(sc), border = "red", add = TRUE)
```

:::

::: {.column}

```{r}
#| echo: false
#| fig-height: 8
rgb_to_hex = function(x){
  apply(t(x), 2, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255))
}
avg_colors = rgb_to_hex(sf::st_drop_geometry(sc[4:6]))
plotRGB(s); plot(vect(sc), col = avg_colors, add = TRUE)
```

:::
::::

<!-- add description -->

---

![](figs/supercells.png)


## {background-image="figs/web1.jpg" background-size="cover"}

<!-- Spiderweb of interconnection -->


["Spidery Fence" (CC BY-NC-SA 2.0) by Theen ...](https://www.flickr.com/photos/theenmoy/22969338962)

## {background-image="figs/web2.jpg" background-size="cover"}

["world’s largest spider web" (CC BY-NC-SA 2.0) by bluehurricane](https://www.flickr.com/photos/bluehurricane/1317521644)

---

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
library(miniCRAN)
dg = makeDepGraph("supercells", enhances = TRUE)
set.seed(1)
plot(dg, legendPosition = c(-1, -1), vertex.size = 10, cex = 0.7)
```

<!-- tmap? -->

<!-- My supercells example? -->
<!-- conversions -->

## Exercises

<!-- exercises -->
<!-- two or three levels of difficulty -->
<!-- Exercise: includes downloading files online, some function that is new,  -->

# Chapter 3: Reproducible analysis

## Reproduciblity spectrum

:::: {.columns}
::: {.column}
![Based on: https://doi.org/10.1126/science.1213847](figs/ladder1.png){height="800"}
:::

::: {.column}
- Reproducible/Replicable
- Not only for publications!
:::

::::

## Yes, but why?

:::: {.columns}
::: {.column}
![](figs/ladder2.png)
:::

::: {.column}
Internal and external reasons
:::

::::


<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#12 -->

<!-- https://the-turing-way.netlify.app/reproducible-research/overview/overview-benefit.html -->

## Self-reproduciblity

:::: {.columns}
::: {.column}
- To reproduce
- To replicate
- To fix/update/modify
:::

::: {.column}
- To extend
- To share
- (To not repeat ourselves)
:::

::::

<!-- ![](figs/timetravel.jpeg){.r-stretch fig-align="center"} -->
![](figs/timetravel2.png){.r-stretch fig-align="center"}


## External reproduciblity

- Reproducible
- Robust
- Transparent
- Reusable
- Shareable

[Putting the R into Reproducible Research](https://annakrystalli.me/talks/r-in-repro-research-dc.html):
<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#122 -->
<!-- https://kbroman.org/knitr_knutshell/pages/reproducible.html -->

<!-- more markus konkol -->

# Chapter 4: Reproducible geocomputation

<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#1 -->

## Story of my life

:::: {.columns}
::: {.column width="50%"}
![](figs/mypap.png){fig-align="center"}
:::

::: {.column}

- **Issue:** human memory
- http://dx.doi.org/10.2478/quageo-2014-0005
- **Solution:** code!

:::

::::

## R code

:::: {.columns}
::: {.column width="60%"}
```{r}
library(terra)
library(supercells)
# setwd("")
s <- rast(system.file("ex/logo.tif", package = "terra"))   
sc = supercells(s, 500, compactness = 50,transform='to_LAB')
sck = kmeans(sf::st_drop_geometry(sc[4:6]), centers = 10)
plot(sf::st_geometry(sc[0]), col = sck$cluster)
```
:::

::: {.column width="40%"}
- **Issue:** working directory
- **Issue:** code style
- **Issue:** randomness
- **Issue:** temporary objects
:::
::::

## R code

- **Issue:** packages (and their dependencies) versions

![](figs/mt-gears.gif){fig-align="center"}


## R code

<!-- improve the code above -->

RStudio: File > New Project > New Directory -> New Project -> ...

<!-- relative paths -->

<!-- clear environment + Restart R -->

## {renv}

https://rstudio.github.io/renv/

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: false
knitr::include_url("https://rstudio.github.io/renv/")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
knitr::include_url("https://rstudio.github.io/renv/articles/renv.html")
```
:::
::::

<!-- issue: software versions, both external and R -->

## Version control

:::: {.columns}
::: {.column width="50%"}
- **Issue:** what if the older version was better?
- **Issue:** backup copy
- **Issue:** sharing
- **Issue:** collaborating
:::

::: {.column width="50%"}
Git
GitHub/GitLab
<!-- add logos/comments -->
<!-- add resources? -->
:::
::::

## Version control

<!-- add gif! -->

## Version control

<!-- geocompr -->

## Literate programming

<!-- sharebility -->
<!-- word example? -->
<!-- rmarkdown/quarto -->

<!-- mention absolute/relative paths -->
<!-- mention R projects -->

## Literate programming

<!-- geocompr -->

## {targets}

- **Issue:** large data
- **Issue:** computationaly demanding operations

## {targets}

<!-- terra pointers -->
<!-- large data storage... -->



## R packages

```{dot d3}
#| echo: FALSE,
#| fig-width: 12,
#| fig-height: 8
digraph G3 {
   layout=dot
   rankdir=LR
   
   node [shape = rectangle];
   rec1 [label = "R code"];
   rec2 [label = "R script"];
   rec3 [label = "R function"];
   rec4 [label = "R function"];
   rec5 [label = "R function"];
   rec6 [label = "R function"];
   rec7 [label = "R package"];
   
   rec1 -> rec2;
   rec2 -> rec3;
   rec2 -> rec4;
   rec2 -> rec5;
   rec2 -> rec6;
   rec3 -> rec7;
   rec4 -> rec7;
   rec5 -> rec7;
   rec6 -> rec7;
   }
```

<!-- repetition -->

## R packages

<!-- gif -->

https://r-pkgs.org/


## R packages

:::: {.columns}
::: {.column}
<!-- supercells -->
:::

::: {.column}
<!-- spData -->
<!-- geocompkg -->
:::
::::

## Docker

https://hub.docker.com/r/geocompr/geocompr


## Docker

<!-- Binder -->
<!-- https://github.com/Robinlovelace/geocompr -->

## CI/CD

<!-- it works on my computer -->


<!-- Each tool plus (real life) example -->
<!-- Gify? -->

## Exercises

<!-- Counterexercise: give a code that worked in the past -- fix it! -->

<!-- exercise: -->
<!-- make the code reproducible -->

# The end

https://jakubnowosad.com/ogh2022/