---
title: "Geocomputation with R's guide <br>to reproducible <br>spatial data analysis"
author: "Jakub Nowosad, <https://jakubnowosad.com/>"
institute: "OpenGeoHub Summer School 2022"
date: "2022-08-30"
date-format: iso
format:
  n3-revealjs:
    echo: true
    highlight-style: github
    slide-number: c/t
    width: 1600
    height: 900
    footer: "[jakubnowosad.com/ogh2022](https://jakubnowosad.com/ogh2022/)"
    transition: none
    preview-links: true
---

# Chapter 1: Geocomputation

<!-- 1.5h + 1.5h -->
<!-- 100 slides top! -->

---

<!-- openshaw -->
<!-- currently an obvious thing -->
<!-- what it involves -->
<!-- connection between different fields -->

::: {.r-fit-text}
(geo)spati|graphic)\*(al)\*

( )\*(stuff|data|comput|inform)\*(ing|ation)\*

(science|systems|theory|analysis)\*
:::

::: aside
Based on the David O’Sullivan's talk title at the Geocomputation 2019 conference
:::

---

::: {.r-fit-text}
(**geo**)spati|graphic)\*(al)\*

( )\*(stuff|data|**comput**|inform)\*(ing|**ation**)\*

(science|systems|theory|analysis)\*
:::

::: aside
Based on the David O’Sullivan's talk title at the Geocomputation 2019 conference
:::

---

:::: {.columns}

::: {.column width="40%"}

> GeoComputation is about using the various different types of geodata and about developing relevant geo-tools within the overall context of a 'scientific' approach (Openshaw 2000).

:::

::: {.column width="60%"}

![](figs/s.openshaw.png){width="450px" fig-align="center"}

:::

::::

<!-- - But we do differ from early definitions in one important way: -->

> At the turn of the 21st Century it was unrealistic to expect readers to be able to reproduce code examples, due to barriers preventing access to the necessary hardware, software and data

---

```{r gdsl, echo=FALSE, message=FALSE}
d = readr::read_csv("data/gis-vs-gds-table.csv")
knitr::kable(x = d, 
             caption = paste("Differences in emphasis between software", 
                             "packages (Graphical User Interface (GUI) of", 
                             "Geographic Information Systems (GIS) and R)."),
             caption.short = "Differences between GUI and CLI",
             booktabs = TRUE)
```

<!-- This book is motivated by the importance of reproducibility\index{reproducibility} for scientific research (see the note below). -->
<!-- It aims to make reproducible geographic data analysis\index{geographic data analysis} workflows more accessible, and demonstrate the power of open geospatial software available from the command-line. -->

# GIS Applications

:::: {.columns}

::: {.column width="50%"}
```{r, echo=FALSE, warning=FALSE, fig.height=7}
# install.packages("wordcloud")
library(wordcloud)
w = c("Ecology", "Earth-Observation", "Economics", "Demography",
  "Politics", "Journalism", "History", "Archeology", "Transport", 
  "Climatology", "Meteorology")
w2 = c("Geomorphometry", "Astronomy", "Architecture", "Hydrology",
       "Insurance", "Urban-Planning", "Mining", "Marine-Studies",
       "Soil-Science", "Sport", "Telecomunication", "Tourism")
wordcloud(c(w), rot.per = 0.2)
```
:::

:::  {.column width="50%"}
```{r}
#| echo = FALSE,
#| fig.height=7
wordcloud(c(w2), rot.per = 0.2)
```
:::

::::

## Data models

Traditionally, spatial data is described by two basic data models: 

- vector data model aimed at representing the world using points, lines, and polygons
- raster data model focused on representing surfaces 

---

### Vector data model(s)

![Source: https://r-tmap.github.io/](figs/vector-data-model-1.png)

---

### Raster data model(s)

![Source: https://r-tmap.github.io/](figs/raster-intro-1.png)

---

::::{.columns}
:::{.column}
### Spatial data cubes
:::

:::{.column}
![Source: https://r-tmap.github.io/](figs/vector-data-cubes-1.png){height="400px"}
:::
::::

![Source: https://r-tmap.github.io/](figs/raster-data-cubes-1.png){height="300px"}

---

### Point clouds

![Source: https://github.com/Jean-Romain/lidR](figs/point-cloud-rotating.gif)

## Coordinate reference systems


```{r, purl=FALSE,echo=FALSE, warning=FALSE}
library(tmap)
library(sf)
world_gr = st_graticule(ndiscr = 9999,
                                  lon = seq(-90, 90, 10),
                                  lat = seq(-180, 180, 10))

ortho_crs = st_crs("+proj=ortho")
world_gr2 = st_transform(world_gr, crs = ortho_crs)
tm1 = tm_shape(world_gr2) +
  tm_lines() +
  tm_layout(inner.margins = 0.05, 
            frame = FALSE, 
            outer.margins = 0)

grid_sf = st_make_grid(world_gr2)
tm2 = tm_shape(grid_sf) +
  tm_polygons(alpha = 0) +
  tm_layout(inner.margins = 0.05, 
            frame = FALSE, 
            outer.margins = 0)
```


:::: {.columns}

::: {.column}
**Geographic coordinates**
```{r, purl=FALSE,echo=FALSE, warning=FALSE, fig.height=6, fig.width=6}
tm1
```
:::

::: {.column}
**Projected coordinates**
```{r, purl=FALSE,echo=FALSE, warning=FALSE, fig.height=6, fig.width=6}
tm2
```
:::

::::

<!-- https://mdsumner.github.io/2016/01/26/Three_Projections.html -->

## Data sources

Software databases: ![](figs/gis1.png){width="700px" fig-align="center"}

File formats: ![](figs/gis2.png){width="700px" fig-align="center"}

::: aside
Source: <https://r-spatial.org/2016/11/29/openeo.html>
:::

## Data sources

```{r formats, echo=FALSE}
file_formats1 = tibble::tribble(~Name, ~Extension, ~Info, ~Type, ~Model, 
                         "ESRI Shapefile", ".shp (the main file)", "Popular format consisting of at least three files. No support for: files > 2GB;  mixed types; names > 10 chars; cols > 255.", "Vector", "Partially open",
                         "GeoJSON", ".geojson", "Extends the JSON exchange format by including a subset of the simple feature representation; mostly used for storing coordinates in longitude and latitude; it is extended by the TopoJSON format", "Vector", "Open",
                         "KML", ".kml", "XML-based format for spatial visualization, developed for use with Google Earth. Zipped KML file forms the KMZ format.", "Vector", "Open",
                         "GPX", ".gpx", "XML schema created for exchange of GPS data.", "Vector", "Open",
                         "FlatGeobuf", ".fgb", "Single file format allowing for quick reading and writing of vector data. Has streaming capabilities.", "Vector", "Open")
file_formats2 = tibble::tribble(~Name, ~Extension, ~Info, ~Type, ~Model, 
                         "GeoTIFF", ".tif/.tiff", "Popular raster format. A TIFF file containing additional spatial metadata.", "Raster", "Open",
                         "Arc ASCII", ".asc", "Text format where the first six lines represent the raster header, followed by the raster cell values arranged in rows and columns.", "Raster", "Open",
                         "SQLite/SpatiaLite", ".sqlite", "Standalone  relational database, SpatiaLite is the spatial extension of SQLite.", "Vector and raster", "Open",
                         "ESRI FileGDB", ".gdb", "Spatial and nonspatial objects created by ArcGIS. Allows: multiple feature classes; topology. Limited support from GDAL.", "Vector and raster", "Proprietary",
                         "GeoPackage", ".gpkg", "Lightweight database container based on SQLite allowing an easy and platform-independent exchange of geodata", "Vector and (very limited) raster", "Open"
                         )
```

::::{.columns}
:::{.column}
```{r formats1, echo=FALSE}
knitr::kable(dplyr::select(file_formats1, -Info), booktabs = TRUE) 
```
Selected spatial file formats
:::

:::{.column}
```{r formats2, echo=FALSE}
knitr::kable(dplyr::select(file_formats2, -Info), booktabs = TRUE) 
```
:::
::::

## Data sources

GDAL:

![Source: https://r-spatial.org/2016/11/29/openeo.html](figs/gis3.png)

## Data sources -- new developments

**SpatioTemporal Asset Catalog (STAC)** -- a general description format for spatiotemporal data that is used to describe a variety of datasets on cloud platforms including imagery, synthetic aperture radar (SAR) data, and point clouds.

**Cloud Optimized GeoTIFF (COG)** -- raster objects saved as COGs can be hosted on HTTP servers, so other people can read only parts of the file without downloading the whole file

**Other new file formats** -- [GeoParquet](https://github.com/opengeospatial/geoparquet), [GeoArrow](https://github.com/paleolimbot/geoarrow), [Zarr](https://gdal.org/drivers/raster/zarr.html)

::: aside
<https://geocompr.robinlovelace.net/gis.html#stac-cogs-and-data-cubes-in-the-cloud>, <https://dewey.dunnington.ca/post/2022/building-bridges-arrow-parquet-and-geospatial-computing/>
:::

## Data processing -- basic vector operations

- Simplification
- Intersect
- Additional topological relations
- Spatial joins
- Centroids
- Buffers

## Data processing -- map algebra

Used for a various task related to spatial raster data.

It can be divided into four groups:

1. **Local** - per-cell operations
2. **Focal (neighborhood operations)** - most often the output cell value is the result of a 3 x 3 input cell block
3. **Zonal operations** - to summarize raster values for some zones (usually irregular areas)
4. **Global** - to summarize raster values for one or several rasters

## Data processing -- raster-vector interactions

1. Raster cropping and masking
2. Raster extraction - by points, lines, and polygons
3. Rasterization - points, lines, polygons to rasters
4. Vectorization - rasters to polygons or contours

<!-- reprojections? -->

## Spatial data analysis

::::{.columns}
:::{.column}
```{dot}
#| echo = FALSE
digraph G {
     layout=circo
     rankdir=LR
     
     node [shape=circle];
     cir1 [label="Spatial analysis"];
     
     node [shape=rectangle];
     rec1 [label="Spatial autocorrelation"];
     rec2 [label="Spatial interpolation"];
     rec3 [label="Spatial interaction"];
     rec4 [label="Simulation and modeling"];
     rec5 [label="Density mapping"];
     
     rec1 -> cir1;
     rec2 -> cir1;
     rec3 -> cir1;
     rec4 -> cir1;
     rec5 -> cir1;
     }
```
:::

:::{.column}
```{dot d2}
#| echo = FALSE
digraph G2 {
   layout=circo
   rankdir=LR
   
   node [shape = circle];
   cir1 [label = "Spatial analysis"];
   
   node [shape = rectangle];
   rec1 [label = "Spatial modeling"];
   rec2 [label = "Point pattern analysis"];
   rec3 [label = "Network analysis"];
   rec4 [label = "Surface analysis"];
   rec5 [label = "Grid analysis"];
   rec6 [label = "Single-layer operations"];
   rec7 [label = "Multi-layer operations"];
   
   rec1 -> cir1;
   rec2 -> cir1;
   rec3 -> cir1;
   rec4 -> cir1;
   rec5 -> cir1;
   rec6 -> cir1;
   rec7 -> cir1;
   }
```
:::
::::

*(incomplete lists)*

## Geocomputational methods

- Exploratory data analysis (EDA)
- Data processing (e.g., adding new variables)
- Data transformation (e.g., changing CRS, reducing size via simplification/aggregation)
- Data visualization
- Web application development
- Software development (e.g., to share new methods)

## Spatial vizualizations

# Chapter 2: Geocomputation with R

## Ecosystems

<!-- more than one way to solve a problem -->

---

- [{sf}](https://github.com/r-spatial/sf),
[{sp}](https://github.com/edzer/sp),
[{terra}](https://github.com/rspatial/terra),
[{raster}](https://github.com/rspatial/raster), [{stars}](https://github.com/r-spatial/stars) - spatial classes
- [{dplyr}](https://github.com/tidyverse/dplyr), [{rmapshaper}](https://github.com/ateucher/rmapshaper) - processing of attribute tables/geometries 
- [{rnaturalearth}](https://github.com/ropensci/rnaturalearth), [{osmdata}](https://github.com/ropensci/osmdata) - spatial data download
- [{rgrass}](https://github.com/rsbivand/rgrass), [{qgisprocess}](https://github.com/paleolimbot/qgisprocess), [{link2GI}](https://github.com/r-spatial/link2GI) - connecting with GIS software
- [{gstat}](https://github.com/r-spatial/gstat), [{mlr3}](https://github.com/mlr-org/mlr3), [{CAST}](https://github.com/HannaMeyer/CAST) - spatial data modeling
- [{rasterVis}](https://github.com/oscarperpinan/rastervis), [{tmap}](https://github.com/mtennekes/tmap), [{ggplot2}](https://github.com/tidyverse/ggplot2) - static visualizations
- [{leaflet}](https://github.com/rstudio/leaflet), [{mapview}](https://github.com/r-spatial/mapview), [{mapdeck}](https://github.com/SymbolixAU/mapdeck) - interactive visualizations
- [{spatstat}](http://spatstat.org/), [{spdep}](https://github.com/r-spatial/spdep), [{spatialreg}](https://github.com/r-spatial/spatialreg), [{dismo}](https://github.com/rspatial/dismo), [{landscapemetrics}](https://github.com/r-spatialecology/landscapemetrics), [{RStoolbox}](http://bleutner.github.io/RStoolbox/rstbx-docu/RStoolbox.html), [{rayshader}](https://github.com/tylermorganwall/rayshader), [{gdalcubes}](https://github.com/appelmar/gdalcubes_R), [{sfnetworks}](https://github.com/luukvdmeer/sfnetworks) - different types of spatial data analysis
- many more...

Visit <https://cran.r-project.org/view=Spatial> to get an overview of different spatial tasks that can be solved using R.

---

![Source: https://geocompr.robinlovelace.net](https://geocompr.robinlovelace.net/figures/01-cranlogs.png)

---

```{r}
library(spData)
library(sf)
world
```

---

```{r}
plot(world)
```

---

![Source: https://www.r-spatial.org/r/2020/03/17/wkt.html](https://keen-swartz-3146c4.netlify.com/images/sf_deps.png)

<!-- + mention bridges -->



---

```{r}
library(terra)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
srtm
```

---

```{r}
plot(srtm)
```

---

![](figs/terra-libs.png)

## {background-image="figs/bingo.jpg" background-opacity=0.2}

::::{.columns}
:::{.column}
### [rspatial](https://www.rspatial.org/) vs [r-spatial](https://www.r-spatial.org/)

<br><br><br><br><br><br>

### [Legacy](https://geocompr.robinlovelace.net/intro.html#the-history-of-r-spatial)
:::

:::{.column}
### Old vs New
<br><br><br><br><br><br>

### Other R ecosystems
:::
::::


## Other foundations

---

![{stars} - https://r-spatial.github.io/stars/](figs/cube2.png)


---

![{s2} - https://r-spatial.github.io/s2/](figs/s2.png)

<!-- also geoarrow -->

---

![{lidR} - https://github.com/r-lidar/lidR](figs/lidr.png)

---

![{sfnetwork} - https://luukvdmeer.github.io/sfnetworks](figs/sfnetwork.png)

---

![{spatstat} - https://spatstat.org/](figs/spatstat.png)

<!-- ecosystem of packages on its own! -->

---

![hypertidy-verse - https://github.com/hypertidy](figs/hypertidy.png)

## (Dependant) spatial packages

## {supercells}

```{r}
#| message: false
library(supercells)
library(terra)
s = rast(system.file("ex/logo.tif", package = "terra"))   
sc = supercells(s, 500, compactness = 50, transform = "to_LAB")
```

:::: {.columns}
::: {.column}

```{r}
#| echo: false
#| fig-height: 8
plotRGB(s); plot(vect(sc), border = "red", add = TRUE)
```

:::

::: {.column}

```{r}
#| echo: false
#| fig-height: 8
rgb_to_hex = function(x){
  apply(t(x), 2, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255))
}
avg_colors = rgb_to_hex(sf::st_drop_geometry(sc[4:6]))
plotRGB(s); plot(vect(sc), col = avg_colors, add = TRUE)
```

:::
::::

<!-- add description -->

---

![](figs/supercells.png)


## {background-image="figs/web1.jpg" background-size="cover"}

<!-- Spiderweb of interconnection -->


["Spidery Fence" (CC BY-NC-SA 2.0) by Theen ...](https://www.flickr.com/photos/theenmoy/22969338962)

## {background-image="figs/web2.jpg" background-size="cover"}

["world’s largest spider web" (CC BY-NC-SA 2.0) by bluehurricane](https://www.flickr.com/photos/bluehurricane/1317521644)

---

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 7
library(miniCRAN)
dg = makeDepGraph("supercells", enhances = TRUE)
set.seed(1)
plot(dg, legendPosition = c(-1, -1), vertex.size = 10, cex = 0.7)
```

<!-- tmap? -->

<!-- My supercells example? -->
<!-- conversions -->

## Exercises

<!-- exercises -->
<!-- two or three levels of difficulty -->
<!-- Exercise: includes downloading files online, some function that is new,  -->

# Chapter 3: Reproducible analysis

## Reproduciblity spectrum

:::: {.columns}
::: {.column}
![Based on: https://doi.org/10.1126/science.1213847](figs/ladder1.png){height="800"}
:::

::: {.column}
- Reproducible/Replicable
- Not only for publications!
:::

::::

## Yes, but why?

:::: {.columns}
::: {.column}
![](figs/ladder2.png)
:::

::: {.column}
Internal and external reasons
:::

::::


<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#12 -->

<!-- https://the-turing-way.netlify.app/reproducible-research/overview/overview-benefit.html -->

## Self-reproduciblity

:::: {.columns}
::: {.column}
- To reproduce
- To replicate
- To fix/update/modify
:::

::: {.column}
- To extend
- To share
- (To not repeat ourselves)
:::

::::

<!-- ![](figs/timetravel.jpeg){.r-stretch fig-align="center"} -->
![](figs/timetravel2.png){.r-stretch fig-align="center"}


## External reproduciblity

- Reproducible
- Robust
- Transparent
- Reusable
- Shareable

::: aside
Source: ["Putting the R into Reproducible Research" by Anna Krystalli](https://annakrystalli.me/talks/r-in-repro-research-dc.html)
:::

<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#122 -->
<!-- https://kbroman.org/knitr_knutshell/pages/reproducible.html -->

<!-- more markus konkol -->

# Chapter 4: Reproducible geocomputation

<!-- https://annakrystalli.me/talks/r-in-repro-research-dc.html#1 -->

## Story of my life

:::: {.columns}
::: {.column width="50%"}
![](figs/mypap.png){fig-align="center"}
:::

::: {.column}

- **Issue:** human memory
- <http://dx.doi.org/10.2478/quageo-2014-0005>
- **Solution:** code!

:::

::::

## R code

:::: {.columns}
::: {.column width="60%"}
```{r}
library(terra)
library(supercells)
# setwd("")
s <- rast(system.file("ex/logo.tif", package = "terra"))   
sc = supercells(s, 500, compactness = 50,transform='to_LAB')
sck = kmeans(sf::st_drop_geometry(sc[4:6]), centers = 10)
plot(sf::st_geometry(sc[0]), col = sck$cluster)
```
:::

::: {.column width="40%" .incremental}
- **Issue:** working directory
- **Issue:** code style
- **Issue:** randomness
- **Issue:** temporary objects
:::
::::

## R code

<!-- improve the code above -->
RStudio: File > New Project > New Directory -> New Project -> ...

Absolute vs relative paths

:::: {.columns}
::: {.column}
![](figs/rproj1.png)
:::

::: {.column .incremental}
![](figs/rproj2.png)
:::
::::

Also: clear environment + restart R

## {reprex}

## R code

- **Issue:** packages (and their dependencies) versions

![](figs/mt-gears.gif){fig-align="center"}

## {renv}

:::: {.columns}
::: {.column width="50%"}
<https://rstudio.github.io/renv/>
```{r}
#| echo: false
knitr::include_url("https://rstudio.github.io/renv/", height = "650px")
```
:::

::: {.column width="50%"}
1. `renv::init(`) to initialize a new project-local environment with a private R library
2. Work in the project as normal, installing and removing new R packages
3. `renv::snapshot()` to save the state of the project library to the lockfile (`renv.lock`)
4. Continue working on your project
5. Call `renv::snapshot()` again to save the state of your project or `renv::restore()` to revert to the previous state as encoded in the lockfile

:::
::::

<!-- issue: software versions, both external and R -->

## Version control

:::: {.columns}
::: {.column width="50%"}
- **Issue:** what if the older version was better?
- **Issue:** backup copy
- **Issue:** sharing
- **Issue:** collaborating
:::

::: {.column width="50%" .incremental}

![](figs/gitlogo.png)

![](figs/rgit.png)

![](figs/githublogo.png)

![](figs/gitlablogo.png)

<!-- add resources? -->
:::
::::

## Version control

<!-- add gif! -->

## Version control

![](figs/geocompr-github.png)

## Literate programming

<!-- sharebility -->
<!-- word example? -->
<!-- rmarkdown/quarto -->


## Literate programming

![](figs/rmd-github.png)

## {targets}

- **Issue:** large data
- **Issue:** computationaly demanding operations

## {targets}

<!-- create example targets -->
<!-- terra pointers -->
<!-- large data storage... -->

## R packages

```{dot d3}
//| echo: false
//| fig-width: 12
digraph G3 {
   layout=dot
   rankdir=LR
   
   node [shape = rectangle];
   rec1 [label = "R code"];
   rec2 [label = "R script"];
   rec3 [label = "R function"];
   rec4 [label = "R function"];
   rec5 [label = "R function"];
   rec6 [label = "R function"];
   rec7 [label = "R package"];
   
   rec1 -> rec2;
   rec2 -> rec3;
   rec2 -> rec4;
   rec2 -> rec5;
   rec2 -> rec6;
   rec3 -> rec7;
   rec4 -> rec7;
   rec5 -> rec7;
   rec6 -> rec7;
   }
```

<!-- repetition -->

## R packages

<!-- gif -->

<https://r-pkgs.org/>
<https://indrajeetpatil.github.io/awesome-r-pkgtools/>


## R packages

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: false
knitr::include_url("https://github.com/Nowosad/supercells")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
knitr::include_url("https://github.com/Nowosad/spData")
knitr::include_url("https://github.com/geocompr/geocompkg")
```
:::
::::

## Docker

<https://docs.docker.com/get-started/>

![](figs/geocompr-docker1.png)

<https://hub.docker.com/r/geocompr/geocompr>

---

:::: {.columns}
::: {.column}
![](figs/geocompr-docker2.png)
:::

::: {.column}
Also see: ![](figs/binder.png)
<https://mybinder.org/v2/gh/robinlovelace/geocompr/main?urlpath=rstudio>
:::
::::

## CI/CD

<!-- it works on my computer -->

<!-- more than one tool -->
<!-- Each tool plus (real life) example -->
<!-- Gify? -->


## CI/CD

<https://github.com/Robinlovelace/geocompr/blob/main/.github/workflows/main.yaml>

:::: {.columns}
::: {.column}
![](figs/gha1.png)
:::

::: {.column}
![](figs/gha2.png)
:::
::::


## Exercises

<!-- Counterexercise: give a code that worked in the past -- fix it! -->

<!-- exercise: -->
<!-- make the code reproducible -->

# The end

<https://jakubnowosad.com/ogh2022/>